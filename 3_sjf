#include <stdio.h>

int main() {
    int arrival_time[10], burst_time[10], temp[10];
    int i, smallest, count = 0, time, limit;
    double wait_time = 0, turnaround_time = 0, end;
    float average_waiting_time, average_turnaround_time;

    // Input for number of processes
    printf("\nEnter the Total Number of Processes:\t");
    scanf("%d", &limit);

    printf("\nEnter Details of %d Processes\n", limit);
    for(i = 0; i < limit; i++) {
        printf("\nEnter Arrival Time for Process[%d]:\t", i + 1);
        scanf("%d", &arrival_time[i]);
        printf("Enter Burst Time for Process[%d]:\t", i + 1);
        scanf("%d", &burst_time[i]);
        temp[i] = burst_time[i];  // Copy burst times to temp array
    }

    burst_time[9] = 9999;  // Set a large value as sentinel for comparison

    for(time = 0; count != limit; time++) {
        smallest = 9;  // Assume the last index as smallest initially

        // Find the process with the smallest burst time
        for(i = 0; i < limit; i++) {
            if(arrival_time[i] <= time && burst_time[i] < burst_time[smallest] && burst_time[i] > 0) {
                smallest = i;
            }
        }

        burst_time[smallest]--;  // Process the smallest job (decrease burst time)

        if(burst_time[smallest] == 0) {  // If process is finished
            count++;
            end = time + 1;  // Completion time
            wait_time += end - arrival_time[smallest] - temp[smallest];  // Calculate waiting time
            turnaround_time += end - arrival_time[smallest];  // Calculate turnaround time
        }
    }

    // Calculate and display average times
    average_waiting_time = wait_time / limit;
    average_turnaround_time = turnaround_time / limit;
    printf("\n\nAverage Waiting Time:\t%lf", average_waiting_time);
    printf("\nAverage Turnaround Time:\t%lf\n", average_turnaround_time);

    return 0;
}
