#include<stdio.h>

int main() {
    int i, NOP, sum = 0, count = 0, y, quant;
    int wt = 0, tat = 0, at[10], bt[10], temp[10];
    float avg_wt, avg_tat;

    // Input for number of processes
    printf("Total number of processes in the system: ");
    scanf("%d", &NOP);
    y = NOP;  // Copy number of processes

    // Input arrival and burst times
    for(i = 0; i < NOP; i++) {
        printf("\nEnter Arrival Time for Process[%d]:\t", i + 1);
        scanf("%d", &at[i]);
        printf("Enter Burst Time for Process[%d]:\t", i + 1);
        scanf("%d", &bt[i]);
        temp[i] = bt[i];  // Copy burst time to temp array
    }

    // Input for time quantum
    printf("Enter the Time Quantum for the process:\t");
    scanf("%d", &quant);

    int wt_per_process[NOP], tat_per_process[NOP];  // Arrays to store waiting time and turnaround time per process
    int current_time = 0;  // Track the current time

    for(sum = 0, i = 0; y != 0; ) {
        if(temp[i] <= quant && temp[i] > 0) {  // Process within time quantum
            current_time += temp[i];
            temp[i] = 0;
            count = 1;
        } else if(temp[i] > 0) {  // Process exceeds time quantum
            temp[i] -= quant;
            current_time += quant;
        }

        if(temp[i] == 0 && count == 1) {  // Process finished
            y--;  // Decrement the number of remaining processes

            // Calculate turnaround and waiting time
            int turnaround_time = current_time - at[i];
            int waiting_time = turnaround_time - bt[i];

            // Make sure waiting time is not negative
            if (waiting_time < 0) waiting_time = 0;

            wt += waiting_time;  // Accumulate total waiting time
            tat += turnaround_time;  // Accumulate total turnaround time

            wt_per_process[i] = waiting_time;  // Store per process waiting time
            tat_per_process[i] = turnaround_time;  // Store per process turnaround time

            count = 0;
        }

        // Move to the next process
        if(i == NOP - 1) {
            i = 0;
        } else if(at[i + 1] <= current_time) {
            i++;
        } else {
            i = 0;
        }
    }

    // Calculate and display average waiting and turnaround times
    avg_wt = (float)wt / NOP;
    avg_tat = (float)tat / NOP;
    printf("\nAverage Waiting Time:\t%f", avg_wt);
    printf("\nAverage Turnaround Time:\t%f\n", avg_tat);

    return 0;
}
